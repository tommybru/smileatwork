var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.propsAndStyles=propsAndStyles;exports.default=extractProps;var _extends2=_interopRequireDefault(require("@babel/runtime/helpers/extends"));var _toConsumableArray2=_interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _extractFill=_interopRequireDefault(require("./extractFill"));var _extractStroke=_interopRequireDefault(require("./extractStroke"));var _extractTransform=require("./extractTransform");var _extractClipPath=_interopRequireDefault(require("./extractClipPath"));var _extractResponder=_interopRequireDefault(require("./extractResponder"));var _extractOpacity=_interopRequireDefault(require("./extractOpacity"));var _util=require("../util");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function propsAndStyles(props){var style=props.style;return _objectSpread({},Array.isArray(style)?Object.assign.apply(Object,[{}].concat((0,_toConsumableArray2.default)(style))):style,{},props);}function extractProps(props,ref){var opacity=props.opacity,onLayout=props.onLayout,id=props.id,clipPath=props.clipPath,mask=props.mask,transform=props.transform;var styleProperties=[];var transformProps=(0,_extractTransform.props2transform)(props);var matrix=(0,_extractTransform.transformToMatrix)(transformProps,transform);var extracted=_objectSpread({matrix:matrix,onLayout:onLayout},transformProps,{propList:styleProperties,opacity:(0,_extractOpacity.default)(opacity)},(0,_extractResponder.default)(props,ref),{},(0,_extractFill.default)(props,styleProperties),{},(0,_extractStroke.default)(props,styleProperties));if(id){extracted.name=id;}if(clipPath){(0,_extends2.default)(extracted,(0,_extractClipPath.default)(props));}if(mask){var matched=mask.match(_util.idPattern);if(matched){extracted.mask=matched[1];}else{console.warn('Invalid `mask` prop, expected a mask like "#id", but got: "'+mask+'"');}}return extracted;}
//# sourceMappingURL=extractProps.js.map