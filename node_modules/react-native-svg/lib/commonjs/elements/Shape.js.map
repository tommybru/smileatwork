{"version":3,"sources":["Shape.tsx"],"names":["touchableGetInitialState","SvgTouchableMixin","touchKeys","Object","keys","touchVals","map","key","numTouchKeys","length","Shape","props","context","root","refMethod","instance","setNativeProps","i","val","bind","state","Component"],"mappings":"ipBAAA,4BACA,mF,GAIQA,CAAAA,wB,CAA6BC,0B,CAA7BD,wB,CACR,GAAME,CAAAA,SAAS,CAAGC,MAAM,CAACC,IAAP,CAAYH,0BAAZ,CAAlB,CACA,GAAMI,CAAAA,SAAS,CAAGH,SAAS,CAACI,GAAV,CAAc,SAAAC,GAAG,QAAIN,4BAAkBM,GAAlB,CAAJ,EAAjB,CAAlB,CACA,GAAMC,CAAAA,YAAY,CAAGN,SAAS,CAACO,MAA/B,C,GAEqBC,CAAAA,K,+DAGnB,eAAYC,MAAZ,CAAsBC,OAAtB,CAAmC,oDACjC,iGAAMD,MAAN,CAAaC,OAAb,GADiC,MADnCC,IACmC,CADkB,IAClB,OAanCC,SAbmC,CAevB,SAACC,QAAD,CAA4D,CACtE,MAAKF,IAAL,CAAYE,QAAZ,CACD,CAjBkC,OAkBnCC,cAlBmC,CAkBlB,SACfL,KADe,CAIZ,CACH,MAAKE,IAAL,EAAa,MAAKA,IAAL,CAAUG,cAAV,CAAyBL,KAAzB,CAAb,CACD,CAxBkC,CAEjC,IAAK,GAAIM,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGT,YAApB,CAAkCS,CAAC,EAAnC,CAAuC,CACrC,GAAMV,CAAAA,GAAG,CAAGL,SAAS,CAACe,CAAD,CAArB,CACA,GAAMC,CAAAA,GAAG,CAAGb,SAAS,CAACY,CAAD,CAArB,CACA,GAAI,MAAOC,CAAAA,GAAP,GAAe,UAAnB,CAA+B,CAC7B,MAAKX,GAAL,EAAYW,GAAG,CAACC,IAAJ,4CAAZ,CACD,CAFD,IAEO,CACL,MAAKZ,GAAL,EAAYW,GAAZ,CACD,CACF,CACD,MAAKE,KAAL,CAAapB,wBAAwB,EAArC,CAXiC,aAYlC,C,eAfmCqB,gB","sourcesContent":["import { Component } from 'react';\nimport SvgTouchableMixin from '../lib/SvgTouchableMixin';\nimport { NativeMethodsMixinStatic } from 'react-native';\nimport { TransformProps } from '../lib/extract/types';\n\nconst { touchableGetInitialState } = SvgTouchableMixin;\nconst touchKeys = Object.keys(SvgTouchableMixin);\nconst touchVals = touchKeys.map(key => SvgTouchableMixin[key]);\nconst numTouchKeys = touchKeys.length;\n\nexport default class Shape<P> extends Component<P> {\n  [x: string]: unknown;\n  root: (Shape<P> & NativeMethodsMixinStatic) | null = null;\n  constructor(props: P, context: {}) {\n    super(props, context);\n    for (let i = 0; i < numTouchKeys; i++) {\n      const key = touchKeys[i];\n      const val = touchVals[i];\n      if (typeof val === 'function') {\n        this[key] = val.bind(this);\n      } else {\n        this[key] = val;\n      }\n    }\n    this.state = touchableGetInitialState();\n  }\n  refMethod: (\n    instance: (Shape<P> & NativeMethodsMixinStatic) | null,\n  ) => void = (instance: (Shape<P> & NativeMethodsMixinStatic) | null) => {\n    this.root = instance;\n  };\n  setNativeProps = (\n    props: Object & {\n      matrix?: [number, number, number, number, number, number];\n    } & TransformProps,\n  ) => {\n    this.root && this.root.setNativeProps(props);\n  };\n}\n"]}