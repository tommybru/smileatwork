{"version":3,"sources":["extractProps.ts"],"names":["extractFill","extractStroke","transformToMatrix","props2transform","extractClipPath","extractResponder","extractOpacity","idPattern","propsAndStyles","props","style","Array","isArray","Object","assign","extractProps","ref","opacity","onLayout","id","clipPath","mask","transform","styleProperties","transformProps","matrix","extracted","propList","name","matched","match","console","warn"],"mappings":"68BAAA,MAAOA,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,OAASC,iBAAT,CAA4BC,eAA5B,KAAmD,oBAAnD,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,OAASC,SAAT,KAA0B,SAA1B,CAWA,MAAO,SAASC,CAAAA,cAAT,CAAwBC,KAAxB,CAA6D,IAC1DC,CAAAA,KAD0D,CAChDD,KADgD,CAC1DC,KAD0D,CAElE,wBACMC,KAAK,CAACC,OAAN,CAAcF,KAAd,EAAuBG,MAAM,CAACC,MAAP,OAAAD,MAAM,EAAQ,EAAR,4BAAeH,KAAf,GAA7B,CAAqDA,KAD3D,IAEKD,KAFL,EAID,CAED,cAAe,SAASM,CAAAA,YAAT,CACbN,KADa,CAabO,GAba,CAcb,IACQC,CAAAA,OADR,CAC6DR,KAD7D,CACQQ,OADR,CACiBC,QADjB,CAC6DT,KAD7D,CACiBS,QADjB,CAC2BC,EAD3B,CAC6DV,KAD7D,CAC2BU,EAD3B,CAC+BC,QAD/B,CAC6DX,KAD7D,CAC+BW,QAD/B,CACyCC,IADzC,CAC6DZ,KAD7D,CACyCY,IADzC,CAC+CC,SAD/C,CAC6Db,KAD7D,CAC+Ca,SAD/C,CAEA,GAAMC,CAAAA,eAAyB,CAAG,EAAlC,CACA,GAAMC,CAAAA,cAAc,CAAGrB,eAAe,CAACM,KAAD,CAAtC,CACA,GAAMgB,CAAAA,MAAM,CAAGvB,iBAAiB,CAACsB,cAAD,CAAiBF,SAAjB,CAAhC,CACA,GAAMI,CAAAA,SAQL,gBACCD,MAAM,CAANA,MADD,CAECP,QAAQ,CAARA,QAFD,EAGIM,cAHJ,EAICG,QAAQ,CAAEJ,eAJX,CAKCN,OAAO,CAAEX,cAAc,CAACW,OAAD,CALxB,EAMIZ,gBAAgB,CAACI,KAAD,CAAQO,GAAR,CANpB,IAOIhB,WAAW,CAACS,KAAD,CAAQc,eAAR,CAPf,IAQItB,aAAa,CAACQ,KAAD,CAAQc,eAAR,CARjB,CARD,CAmBA,GAAIJ,EAAJ,CAAQ,CACNO,SAAS,CAACE,IAAV,CAAiBT,EAAjB,CACD,CAED,GAAIC,QAAJ,CAAc,CACZ,SAAcM,SAAd,CAAyBtB,eAAe,CAACK,KAAD,CAAxC,EACD,CAED,GAAIY,IAAJ,CAAU,CACR,GAAMQ,CAAAA,OAAO,CAAGR,IAAI,CAACS,KAAL,CAAWvB,SAAX,CAAhB,CAEA,GAAIsB,OAAJ,CAAa,CACXH,SAAS,CAACL,IAAV,CAAiBQ,OAAO,CAAC,CAAD,CAAxB,CACD,CAFD,IAEO,CACLE,OAAO,CAACC,IAAR,CACE,8DACEX,IADF,CAEE,GAHJ,EAKD,CACF,CAED,MAAOK,CAAAA,SAAP,CACD","sourcesContent":["import extractFill from './extractFill';\nimport extractStroke from './extractStroke';\nimport { transformToMatrix, props2transform } from './extractTransform';\nimport extractClipPath from './extractClipPath';\nimport extractResponder from './extractResponder';\nimport extractOpacity from './extractOpacity';\nimport { idPattern } from '../util';\nimport {\n  ClipProps,\n  FillProps,\n  NumberProp,\n  ResponderProps,\n  StrokeProps,\n  TransformProps,\n} from './types';\nimport { Component } from 'react';\n\nexport function propsAndStyles(props: Object & { style?: [] | {} }) {\n  const { style } = props;\n  return {\n    ...(Array.isArray(style) ? Object.assign({}, ...style) : style),\n    ...props,\n  };\n}\n\nexport default function extractProps(\n  props: {\n    id?: string;\n    mask?: string;\n    clipPath?: string;\n    opacity?: NumberProp;\n    onLayout?: () => void;\n    transform?: number[] | string | TransformProps;\n  } & TransformProps &\n    ResponderProps &\n    StrokeProps &\n    FillProps &\n    ClipProps,\n  ref: Object,\n) {\n  const { opacity, onLayout, id, clipPath, mask, transform } = props;\n  const styleProperties: string[] = [];\n  const transformProps = props2transform(props);\n  const matrix = transformToMatrix(transformProps, transform);\n  const extracted: {\n    name?: string;\n    mask?: string;\n    opacity: number;\n    matrix: number[];\n    propList: string[];\n    onLayout?: () => void;\n    ref?: (instance: Component | null) => void;\n  } = {\n    matrix,\n    onLayout,\n    ...transformProps,\n    propList: styleProperties,\n    opacity: extractOpacity(opacity),\n    ...extractResponder(props, ref),\n    ...extractFill(props, styleProperties),\n    ...extractStroke(props, styleProperties),\n  };\n\n  if (id) {\n    extracted.name = id;\n  }\n\n  if (clipPath) {\n    Object.assign(extracted, extractClipPath(props));\n  }\n\n  if (mask) {\n    const matched = mask.match(idPattern);\n\n    if (matched) {\n      extracted.mask = matched[1];\n    } else {\n      console.warn(\n        'Invalid `mask` prop, expected a mask like \"#id\", but got: \"' +\n          mask +\n          '\"',\n      );\n    }\n  }\n\n  return extracted;\n}\n"]}